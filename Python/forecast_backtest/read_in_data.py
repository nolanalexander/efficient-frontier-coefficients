import pandas as pdimport numpy as npimport datetime as dtimport yfinance as yffrom pandas_datareader import data as pdrimport osimport timefrom data_processing.data_cleaning import fill_miss_ts_df, multiindex_df_along_one_colfrom data_processing.ts_utils import get_quarters'''Utility functions to read in data with yfinance or csv'''tickers_only_csv = ['BA', 'BC', 'CN', 'CO', 'GD', 'IO', 'NG', 'PO', 'SB', 'SO', 'WH']def read_in_single_asset_data(ticker, start_date, end_date):    yf.pdr_override()    if ticker in tickers_only_csv:        asset_df = pd.read_csv('../CSV_Data/'+ticker+'.csv', index_col=0, parse_dates=True, dtype=float)        asset_df = asset_df[(asset_df.index >= start_date) & (asset_df.index <= end_date)]    else:        asset_df = pdr.get_data_yahoo(ticker, start_date, end_date)    return asset_dfdef read_in_assets_data(asset_set, tickers, start_date, end_date, read_in_bonds=True, read_in_spxtr=True, save_csv=True):    start_time = time.time()    yf.pdr_override()    non_csv_tickers = pd.Series(tickers)[~pd.Series(tickers).isin(tickers_only_csv)].to_list()    csv_tickers = pd.Series(tickers)[pd.Series(tickers).isin(tickers_only_csv)].to_list()        # Read in non-csv tickers    assets_df = pdr.get_data_yahoo(non_csv_tickers, start_date, end_date)    if len(non_csv_tickers) > 1:        assets_df = assets_df.stack()        assets_df['Ticker'] = assets_df.index.get_level_values(1)        assets_df.index = assets_df.index.get_level_values(0)    else:        assets_df['Ticker'] = non_csv_tickers[0]        # Read in csv tickers    for csv_ticker in csv_tickers:        cur_df = pd.read_csv('../CSV_Data/'+csv_ticker+'.csv', index_col=0, parse_dates=True, dtype=float)        cur_df = cur_df[(cur_df.index >= start_date) & (cur_df.index <= end_date)]        assets_df = pd.concat([assets_df, cur_df])        assets_df['Year'] = assets_df.index.year    assets_df['Quarter'] = get_quarters(assets_df.index)    assets_df = assets_df.groupby('Ticker').apply(fill_miss_ts_df, all_dates=assets_df.index)    assets_df = assets_df.reset_index().rename(columns={'index': 'Date'})    assets_df = assets_df.sort_values(['Ticker', 'Date'])    assets_df['Chg'] = np.log(assets_df.groupby('Ticker')['Adj Close'].pct_change(1)+1).values        if save_csv:        subfolder_dir = '../Portfolios/'+asset_set+'/Assets_Data/'        if not os.path.exists(subfolder_dir):            os.makedirs(subfolder_dir)        assets_df.to_csv(subfolder_dir+'assets_data.csv', index=False)            if read_in_bonds and save_csv:        bonds_df = pdr.get_data_yahoo('FPNIX', start_date, end_date)        bonds_df = fill_miss_ts_df(bonds_df, assets_df['Date'].unique(), method='nearest')        bonds_df.to_csv('../Portfolios/'+asset_set+'/Assets_Data/bonds_data.csv')    if read_in_spxtr and save_csv:        spx_df = pdr.get_data_yahoo('^SP500TR', start_date - dt.timedelta(5), end_date)        spx_df = fill_miss_ts_df(spx_df, assets_df['Date'].unique(), method='nearest')        spx_df['Chg'] = spx_df['Adj Close'].pct_change()        spx_df = spx_df[spx_df.index >= start_date]        spx_df.to_csv('../Portfolios/'+asset_set+'/Assets_Data/spx_data.csv')    assets_returns_df = multiindex_df_along_one_col(assets_df.set_index(['Date', 'Ticker']), 'Chg')    if save_csv:        assets_returns_df.to_csv('../Portfolios/'+asset_set+'/Assets_Data/assets_returns_data.csv', index=True)    print('Reading in data runtime:', round((time.time() - start_time)/60), 'mins' )    return assets_dfdef read_in_fama_french(dates):    ff_df = pd.read_csv('../CSV_Data/F-F_Research_Data_Factors_daily.csv',                         skiprows=4, skipfooter=2, engine='python', index_col=0)    ff_df.index = pd.to_datetime(ff_df.index, format='%Y%m%d')    ff_df = ff_df[(ff_df.index >= dates.min()) & (ff_df.index <= dates.max())]    ff_df.index = ff_df.index.rename('Date')    rf_df = fill_miss_ts_df(ff_df[['RF']], dates, method='nearest')    ff_df = fill_miss_ts_df(ff_df[['Mkt-RF', 'HML', 'SMB']], dates, method='zero')    ff_df['RF'] = rf_df['RF']    ff_df = ff_df / 100    return ff_df    def read_in_rf(dates):    ff_df = read_in_fama_french(dates)    return ff_df['RF']def read_in_bonds(asset_set, dates):    bonds_df = pd.read_csv('../Portfolios/'+asset_set+'/Assets_Data/bonds_data.csv', index_col=0, parse_dates=True)    bonds_df = bonds_df[(bonds_df.index >= dates.min()) & (bonds_df.index <= dates.max())]    bonds_df['Chg'] = bonds_df['Adj Close'].pct_change()    bonds_df = fill_miss_ts_df(bonds_df, dates)    return bonds_dfdef read_in_spxtr(asset_set, dates):    spx_df = pd.read_csv('../Portfolios/'+asset_set+'/Assets_Data/spx_data.csv', index_col=0, parse_dates=True)    spx_df = spx_df[(spx_df.index >= dates.min()) & (spx_df.index <= dates.max())]    spx_df['Chg'] = np.log(spx_df['Adj Close'].pct_change(1)+1).values    spx_df = fill_miss_ts_df(spx_df, dates)    return spx_dfdef read_in_cur_price_and_outstanding_shares(assets_set, tickers, date):    last_week = date - dt.timedelta(days=7)    assets_df = read_in_assets_data(assets_set, tickers, last_week, date, read_in_irx=False, read_in_spxtr=False)    cur_value_adj_close_list = assets_df.groupby('Ticker')['Adj Close'].last()    shares_outstanding_list = pd.Series(index=tickers, dtype=float)    for ticker in tickers:        shares_outstanding = yf.Ticker(ticker).info.get('sharesOutstanding')        shares_outstanding_list.loc[ticker] = shares_outstanding if shares_outstanding is not None else 1    return [cur_value_adj_close_list, shares_outstanding_list]