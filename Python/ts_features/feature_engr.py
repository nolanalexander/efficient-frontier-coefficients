import pandas as pdimport numpy as npfrom sklearn.linear_model import LinearRegressionfrom scipy.stats import skew, kurtosis, andersonfrom itertools import productimport timeimport os'''Creates common technical indicators'''    def get_slope(y):    x = y.index    if x.isna().any() | y.isna().any(): return np.nan    else: return LinearRegression().fit(x.values.reshape(-1, 1), y.values).coef_[0]def add_ts_features(assets_df, include_yearly=False):    assets_df['Date'] = pd.to_datetime(assets_df['Date'])    assets_df = assets_df.sort_values(['Ticker', 'Date'])        # Intermediate Calculations    assets_df_grouped = assets_df.groupby('Ticker')    assets_df['Close_1lag'] = assets_df_grouped['Close'].shift(1).values    assets_df['5D_Chg'] = np.log(assets_df_grouped['Adj Close'].pct_change(5).values+1)    assets_df['10D_Chg'] = np.log(assets_df_grouped['Adj Close'].pct_change(10).values+1)    assets_df['1mo_Chg'] = np.log(assets_df_grouped['Adj Close'].pct_change(21).values+1)    assets_df['3mo_Chg'] = np.log(assets_df_grouped['Adj Close'].pct_change(63).values+1)    assets_df['Up'] = (assets_df['Chg'] > 0).astype(int)    assets_df['Down'] = (assets_df['Chg'] <= 0).astype(int)    assets_df['Lowest_Low_10D'] = assets_df_grouped['Low'].rolling(10).min().values    assets_df['Highest_High_10D'] = assets_df_grouped['High'].rolling(10).max().values    assets_df['Lowest_Low_1mo'] = assets_df_grouped['Low'].rolling(21).min().values    assets_df['Highest_High_1mo'] = assets_df_grouped['High'].rolling(10).max().values    assets_df['Adj_Close_10D_lag'] = assets_df_grouped['Adj Close'].shift(10).values    assets_df['Adj_Close_1mo_lag'] = assets_df_grouped['Adj Close'].shift(21).values    assets_df['Adj_Close_5D_MA'] = assets_df_grouped['Adj Close'].rolling(5).mean().values    assets_df['Adj_Close_10D_MA'] = assets_df_grouped['Adj Close'].rolling(10).mean().values    assets_df['Adj_Close_1mo_MA'] = assets_df_grouped['Adj Close'].rolling(21).mean().values    assets_df['Disparity_5D'] = 100*(assets_df['Adj Close'] / assets_df['Adj_Close_5D_MA'])    assets_df['Disparity_10D'] = 100*(assets_df['Adj Close'] / assets_df['Adj_Close_10D_MA'])    assets_df['Disparity_1mo'] = 100*(assets_df['Adj Close'] / assets_df['Adj_Close_1mo_MA'])    assets_df['M'] = ((assets_df['High']+assets_df['Low']+assets_df['Close'])/3.0)    assets_df['SM_10D'] = assets_df.groupby('Ticker')['M'].rolling(10).mean().values    assets_df['SM_1mo'] = assets_df.groupby('Ticker')['M'].rolling(21).mean().values    assets_df['D_10D'] = assets_df.groupby('Ticker')['SM_10D'].rolling(10).std().values    assets_df['D_1mo'] = assets_df.groupby('Ticker')['SM_1mo'].rolling(21).std().values    def above0_mean(x): return x.clip(lower=0).mean()    def below0_mean(x): return x.clip(upper=0).mean()    assets_df['Gain_10D_MA'] = assets_df_grouped['Chg'].rolling(10).apply(above0_mean).values    assets_df['Gain_1mo_MA'] = assets_df_grouped['Chg'].rolling(21).apply(above0_mean).values    assets_df['Loss_10D_MA'] = assets_df_grouped['Chg'].rolling(10).apply(below0_mean).values    assets_df['Loss_1mo_MA'] = assets_df_grouped['Chg'].rolling(21).apply(below0_mean).values        # Return features    assets_df['Chg'] = np.log(assets_df_grouped['Adj Close'].pct_change(1).values+1)    assets_df['Chg_5D_MA'] = np.log(assets_df_grouped['Adj Close'].pct_change(5).values+1)    assets_df['Chg_10D_MA'] = np.log(assets_df_grouped['Adj Close'].pct_change(10).values+1)    assets_df['Chg_1mo_MA'] = np.log(assets_df_grouped['Adj Close'].pct_change(21).values+1)    assets_df['Chg_3mo_MA'] = assets_df_grouped['Chg'].rolling(63).mean().values        # Return derivative features    assets_df.index = (pd.to_datetime(assets_df['Date'].values) - pd.to_datetime(assets_df['Date'].values)[0]).days    assets_df['Chg_1mo_Slope'] = assets_df_grouped['Chg'].rolling(21).apply(get_slope).values    assets_df['Chg_3mo_Slope'] = assets_df_grouped['Chg'].rolling(63).apply(get_slope).values    assets_df['1mo_Chg_3mo_Slope'] = assets_df_grouped['1mo_Chg'].rolling(63).apply(get_slope).values    if include_yearly:        assets_df['1mo_Chg_1yr_Slope'] = assets_df_grouped['1mo_Chg'].rolling(252).apply(get_slope).values        # Return Lags    for lag in range(1, 5+1):        assets_df['Chg_'+str(lag)+'D'] = assets_df_grouped['Chg'].shift(lag).values        # Vol features    assets_df['5D_Vol'] = assets_df_grouped['Chg'].rolling(5).std().values    assets_df['10D_Vol'] = assets_df_grouped['Chg'].rolling(10).std().values    assets_df['1mo_Vol'] = assets_df_grouped['Chg'].rolling(21).std().values    assets_df['3mo_Vol'] = assets_df_grouped['Chg'].rolling(63).std().values    if include_yearly:        assets_df['1yr_Vol'] = assets_df_grouped['Chg'].rolling(252).std().values    assets_df['TrueRange'] = (np.maximum(assets_df['High'], assets_df['Close_1lag']) - np.minimum(assets_df['Low'], assets_df['Close_1lag']))/assets_df['Open']    assets_df_grouped = assets_df.groupby('Ticker')        # Vol Derivatives    assets_df['1mo_Vol_3mo_Slope'] = assets_df_grouped['1mo_Vol'].rolling(63).apply(get_slope).values    if include_yearly:        assets_df['1mo_Vol_1yr_Slope'] = assets_df_grouped['1mo_Vol'].rolling(252).apply(get_slope).values        assets_df['3mo_Vol_1yr_Slope'] = assets_df_grouped['3mo_Vol'].rolling(252).apply(get_slope).values    assets_df['TrueRange_1mo_Slope'] = assets_df_grouped['TrueRange'].rolling(21).apply(get_slope).values    assets_df['TrueRange_3mo_Slope'] = assets_df_grouped['TrueRange'].rolling(63).apply(get_slope).values        # Distribution Higher-order Moments features    assets_df['Chg_1mo_Skew'] = assets_df_grouped['Chg'].rolling(21).apply(skew).values    assets_df['Chg_1mo_Kurtosis'] = assets_df_grouped['Chg'].rolling(21).apply(kurtosis).values    assets_df['Chg_3mo_Skew'] = assets_df_grouped['Chg'].rolling(63).apply(skew).values    assets_df['Chg_3mo_Kurtosis'] = assets_df_grouped['Chg'].rolling(63).apply(kurtosis).values    def anderson_stat(x): return anderson(x)[0]    assets_df['Chg_1mo_AD_test'] = assets_df_grouped['Chg'].rolling(21).apply(anderson_stat).values    assets_df['Chg_3mo_AD_test'] = assets_df_grouped['Chg'].rolling(63).apply(anderson_stat).values        # Binary features    assets_df['Winrate_10D'] = assets_df_grouped['Up'].rolling(10).mean().values    assets_df['Winrate_1mo'] = assets_df_grouped['Up'].rolling(21).mean().values    assets_df['Winrate_3mo'] = assets_df_grouped['Up'].rolling(63).mean().values    assets_df['Winrate_1mo'] = assets_df_grouped['Up'].rolling(21).mean().values    grouper = (assets_df['Up'] != assets_df_grouped['Up'].shift(1)).cumsum().values    assets_df['Win_Streak'] = assets_df.groupby(grouper)[['Up']].cumsum().values    grouper = (assets_df['Down'] != assets_df_grouped['Down'].shift(1)).cumsum().values    assets_df['Loss_Streak'] = assets_df.groupby(grouper)[['Down']].cumsum().values        # Binary Sequence features    def sequence_trans_prob(bits, n):        seq_counts = {}        seq_probs = pd.Series(np.nan, index=bits.index)        for sequence in list(product([0, 1], repeat=n+1)):            seq_counts[(sequence[:n], sequence[n])] = 0        for i in range(n, len(bits.index)):            seq_counts[(tuple(bits.iloc[i-n:i].values), bits.iloc[i])] += 1            up_count = seq_counts[(tuple(bits.iloc[i-n+1:i+1]), 1)]            down_count = seq_counts[(tuple(bits.iloc[i-n+1:i+1]), 0)]            if up_count == 0 and down_count == 0:                seq_probs.iloc[i] = np.nan            else:                seq_probs.iloc[i] = up_count / (up_count + down_count)        return seq_probs    assets_df = assets_df.reset_index(drop=True)        # Technical Indicators    assets_df['Sto_K_10D'] = 100*(assets_df['Close'] - assets_df['Lowest_Low_10D'])/(assets_df['Highest_High_10D'] - assets_df['Lowest_Low_10D'])    assets_df['Sto_K_1mo'] = 100*(assets_df['Close'] - assets_df['Lowest_Low_1mo'])/(assets_df['Highest_High_1mo'] - assets_df['Lowest_Low_1mo'])    assets_df['Williams_R_10D'] = (100*(assets_df['Highest_High_10D'] - assets_df['Close'])                                  /(assets_df['Highest_High_10D'] - assets_df['Lowest_Low_10D']))    assets_df['Williams_R_1mo'] = (100*(assets_df['Highest_High_1mo'] - assets_df['Close'])                                        /(assets_df['Highest_High_1mo'] - assets_df['Lowest_Low_1mo']))    assets_df['Momentum_10D'] = (assets_df['Adj Close'] - assets_df['Adj_Close_10D_lag'])    assets_df['Momentum_1mo'] = (assets_df['Adj Close'] - assets_df['Adj_Close_1mo_lag'])    assets_df['ROC_10D'] = 100*(assets_df['Adj Close'] / assets_df['Adj_Close_10D_lag'])    assets_df['ROC_1mo'] = 100*(assets_df['Adj Close'] / assets_df['Adj_Close_1mo_lag'])    assets_df['A/D_Osci'] = (assets_df['High'] - assets_df['Close'].shift(1))/(assets_df['High'] - assets_df['Low'])    assets_df['A/D_Osci_10D_MA'] = assets_df.groupby('Ticker')['A/D_Osci'].rolling(10).mean().values    assets_df['OSCP_10D'] = ((assets_df['Disparity_5D'] - assets_df['Disparity_10D']) / assets_df['Disparity_5D'])    assets_df['OSCP_1mo'] = ((assets_df['Disparity_10D'] - assets_df['Disparity_1mo']) / assets_df['Disparity_10D'])    assets_df['CCI_10D'] = (assets_df['M'] - assets_df['SM_10D']) / (assets_df['D_10D'] * 0.015)    assets_df['CCI_1mo'] = (assets_df['M'] - assets_df['SM_1mo']) / (assets_df['D_1mo'] * 0.015)    assets_df['RSI_10D'] = 100 - 100 / (1 + abs(assets_df['Gain_10D_MA'] / assets_df['Loss_10D_MA'] ))    assets_df['RSI_1mo'] = 100 - 100 / (1 + abs(assets_df['Gain_1mo_MA'] / assets_df['Loss_1mo_MA'] ))    assets_df.drop(columns=[        'Open', 'High', 'Low', 'Close', 'Volume', 'Year', 'Quarter',        'Close_1lag', '5D_Chg', '10D_Chg', '1mo_Chg', '3mo_Chg', 'Up', 'Down',        'Lowest_Low_10D', 'Highest_High_10D', 'Lowest_Low_1mo', 'Highest_High_1mo',         'Adj_Close_10D_lag', 'Adj_Close_1mo_lag',         'Adj_Close_5D_MA', 'Adj_Close_10D_MA', 'Adj_Close_1mo_MA',         'Disparity_5D', 'Disparity_10D', 'Disparity_1mo',        'M', 'SM_10D', 'SM_1mo', 'D_10D', 'D_1mo',         'Gain_10D_MA', 'Gain_1mo_MA', 'Loss_10D_MA', 'Loss_1mo_MA'], inplace=True)    assets_df = assets_df.reset_index(drop=True)    return assets_dfdef create_pred_data(assets_set, include_yearly=False):    start_time = time.time()    data_dir = '../Portfolios/'+assets_set+'/Assets_Data/'    assets_df = pd.read_csv(data_dir + 'assets_data.csv')    pred_df = add_ts_features(assets_df)    proc_data_dir = data_dir + 'Processed_Data/'    if not os.path.exists(proc_data_dir):        os.makedirs(proc_data_dir)    pred_df.to_csv(proc_data_dir + 'assets_data_ts_features.csv', index=False)    print('Create predictors data runtime: ' + str(round((time.time() - start_time)/60, 1)) + ' mins')        