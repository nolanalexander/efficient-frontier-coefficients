import pandas as pdimport numpy as npimport datetime as dtimport yfinance as yffrom pandas_datareader import data as pdrimport osimport timefrom data_processing.data_cleaning import fill_miss_ts_df, multiindex_df_along_one_colfrom data_processing.ts_utils import get_quarters'''Utility functions to read in data with yfinance or csv'''tickers_only_csv = ['BA', 'BC', 'CN', 'CO', 'GD', 'IO', 'NG', 'PO', 'SB', 'SO', 'WH']tickers_only_spot = ['BA', 'BC', 'CN', 'CO', 'IO', 'NG', 'PO', 'SB', 'SO', 'WH']def read_in_single_asset_data(ticker, start_date, end_date):    yf.pdr_override()    if ticker in tickers_only_csv:        asset_df = pd.read_csv('../CSV_Data/'+ticker+'.csv', index_col=0, parse_dates=True, dtype=float)        asset_df = asset_df[(asset_df.index >= start_date) & (asset_df.index <= end_date)]    else:        asset_df = pdr.get_data_yahoo(ticker, start_date, end_date)    return asset_dfdef read_in_assets_data(asset_set, tickers, start_date, end_date, read_in_bonds=True, read_in_spxtr=True, read_in_eq_weight=True, save_csv=True):    start_time = time.time()    yf.pdr_override()    non_csv_tickers = pd.Series(tickers)[~pd.Series(tickers).isin(tickers_only_csv)].to_list()    csv_tickers = pd.Series(tickers)[pd.Series(tickers).isin(tickers_only_csv)].to_list()    tickers = non_csv_tickers + csv_tickers        # Read in non-csv tickers    assets_df = pdr.get_data_yahoo(non_csv_tickers, start_date, end_date) if len(non_csv_tickers) > 0 else None    if len(non_csv_tickers) > 1:        assets_df = assets_df.stack()        assets_df.index.names = ['Date', 'Ticker']        assets_df = assets_df.swaplevel(0, 1)    elif len(non_csv_tickers) == 1:        assets_df['Ticker'] = non_csv_tickers[0]        assets_df = assets_df.reset_index().set_index(['Ticker', 'Date'])        # Read in csv tickers    for csv_ticker in csv_tickers:        cur_df = pd.read_csv('../CSV_Data/'+csv_ticker+'.csv', index_col=0, parse_dates=True, dtype=float)        cur_df = cur_df[(cur_df.index >= start_date) & (cur_df.index <= end_date)]        if csv_ticker in tickers_only_spot:            cur_df = pd.DataFrame({'Open'      : cur_df.iloc[:,0],                                    'High'      : cur_df.iloc[:,0],                                    'Low'       : cur_df.iloc[:,0],                                    'Close'     : cur_df.iloc[:,0],                                    'Adj Close' : cur_df.iloc[:,0]})        cur_df['Ticker'] = csv_ticker        assets_df.index.names = ['Date']        cur_df = cur_df.reset_index().set_index(['Ticker', 'Date'])        assets_df = pd.concat([assets_df, cur_df]) if assets_df is not None else cur_df        assets_df['Year'] = assets_df.index.get_level_values('Date').year    assets_df['Quarter'] = get_quarters(assets_df.index.get_level_values('Date'))    unique_dates = assets_df.index.get_level_values('Date').unique().sort_values()    assets_df = (assets_df.reset_index().set_index('Date')                 .groupby('Ticker').apply(fill_miss_ts_df, all_dates=unique_dates))    if assets_df.index.nlevels < 2:        assets_df = assets_df.reset_index().set_index(['Ticker', 'Date']).sort_index()    assets_df['Chg'] = np.log(assets_df.groupby(level='Ticker')['Adj Close'].pct_change(1)+1).values        if save_csv:        subfolder_dir = '../Portfolios/'+asset_set+'/Assets_Data/'        if not os.path.exists(subfolder_dir):            os.makedirs(subfolder_dir)        assets_df.to_csv(subfolder_dir+'assets_data.csv')            if read_in_bonds and save_csv:        bonds_df = pdr.get_data_yahoo('FPNIX', start_date, end_date)        bonds_df = fill_miss_ts_df(bonds_df, unique_dates, method='nearest')        bonds_df['Chg'] = np.log(bonds_df['Adj Close'].pct_change(1)+1)        bonds_df.to_csv('../Portfolios/'+asset_set+'/Assets_Data/bonds_data.csv')    if read_in_spxtr and save_csv:        spx_df = pdr.get_data_yahoo('^SP500TR', start_date - dt.timedelta(5), end_date)        spx_df = fill_miss_ts_df(spx_df, unique_dates, method='nearest')        spx_df['Chg'] = np.log(spx_df['Adj Close'].pct_change(1)+1)        spx_df = spx_df[spx_df.index >= start_date]        spx_df.to_csv('../Portfolios/'+asset_set+'/Assets_Data/spx_data.csv')    assets_returns_df = multiindex_df_along_one_col(assets_df, 'Chg')    if save_csv:        assets_returns_df.to_csv('../Portfolios/'+asset_set+'/Assets_Data/assets_returns_data.csv', index=True)    if read_in_eq_weight and save_csv:        eq_weight_df = pd.DataFrame({'Chg' : (1/len(assets_returns_df.columns)) * assets_returns_df.sum(1)})        eq_weight_df.to_csv('../Portfolios/'+asset_set+'/Assets_Data/eq_weight_data.csv')    print('Reading in data runtime:', round((time.time() - start_time)/60), 'mins' )    return assets_dfdef read_in_fama_french(dates):    ff_df = pd.read_csv('../CSV_Data/F-F_Research_Data_Factors_daily.csv',                         skiprows=4, skipfooter=2, engine='python', index_col=0)    ff_df.index = pd.to_datetime(ff_df.index, format='%Y%m%d')    ff_df = ff_df[(ff_df.index >= dates.min()) & (ff_df.index <= dates.max())]    ff_df.index = ff_df.index.rename('Date')    rf_df = fill_miss_ts_df(ff_df[['RF']], dates, method='nearest')    ff_df = fill_miss_ts_df(ff_df[['Mkt-RF', 'HML', 'SMB']], dates, method='zero')    ff_df['RF'] = rf_df['RF']    ff_df = ff_df / 100    ff_df.index = ff_df.index.rename('Date')    return ff_df.sort_index()    def read_in_rf(dates):    ff_df = read_in_fama_french(dates)    return ff_df['RF']def read_in_bonds(asset_set, dates):    bonds_df = pd.read_csv('../Portfolios/'+asset_set+'/Assets_Data/bonds_data.csv', index_col=0, parse_dates=True)    bonds_df = bonds_df[(bonds_df.index >= dates.min()) & (bonds_df.index <= dates.max())]    bonds_df = fill_miss_ts_df(bonds_df, dates)    return bonds_df.sort_index()def read_in_spxtr(asset_set, dates):    spx_df = pd.read_csv('../Portfolios/'+asset_set+'/Assets_Data/spx_data.csv', index_col=0, parse_dates=True)    spx_df = spx_df[(spx_df.index >= dates.min()) & (spx_df.index <= dates.max())]    spx_df = fill_miss_ts_df(spx_df, dates)    return spx_df.sort_index()def read_in_eq_weight(asset_set, dates):    eq_weight_df = pd.read_csv('../Portfolios/'+asset_set+'/Assets_Data/eq_weight_data.csv', index_col=0, parse_dates=True)    eq_weight_df = eq_weight_df[(eq_weight_df.index >= dates.min()) & (eq_weight_df.index <= dates.max())]    eq_weight_df = fill_miss_ts_df(eq_weight_df, dates)    return eq_weight_df.sort_index()def read_in_cur_price_and_outstanding_shares(assets_set, tickers, date):    last_week = date - dt.timedelta(days=7)    assets_df = read_in_assets_data(assets_set, tickers, last_week, date, read_in_irx=False, read_in_spxtr=False)    cur_value_adj_close_list = assets_df.groupby('Ticker')['Adj Close'].last()    shares_outstanding_list = pd.Series(index=tickers, dtype=float)    for ticker in tickers:        shares_outstanding = yf.Ticker(ticker).info.get('sharesOutstanding')        shares_outstanding_list.loc[ticker] = shares_outstanding if shares_outstanding is not None else 1    return [cur_value_adj_close_list, shares_outstanding_list]